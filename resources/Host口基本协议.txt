/*HOST UART口，使用该口有如下规定*/
/*******************************************************************
/// 1、数据包格式
//  |-----------------------------------------------------------------
//  |Start(1Byte) | Size(2Byte) | ID(1Byte) | Data(nByte) | CRC(1Byte)|
//  |-----------------------------------------------------------------
// Start     只能为 0xAD
// Size Msb  (Size = n(Data) + 1(CRC))
// Size Lsb
// ID        ID不能为0xff否则会出问题/模块收发命令用的都是ff/lua日志都是80(待确认)
// Data 1
//   .
//   .
//   .
// Data n
// CRC       ID和Data的每个byte异或结果


//Sample     AD0002940094
             AD000C8A28000100B104000041540D0E

///  2、波特率必须为 921600，databit为7或8，不支持奇偶校验

//   3、建议配置OPENAT_UART_FLOWCONTROL_HW，支持XON/XOFF流控
        通信对端需要支持软流控XON(0x11)/XOFF(0x13)，配置该参数
        后程序会根据硬件FIFO自动产生流控字符，不需要软件干涉

        目前不配置流控的情况下，特殊字符(0x11,0x13,0x5c)会丢失或者数据包接受不完整

     4、关于流控下特殊字符(0x11,0x13,0x5C)的转义处理
        为了数据包中数据和流控字符(XON/XOFF)不产生冲突，数据包中包含的
        特殊字符需要通过0x5c进行转义
          > 转义的方法是：0X5C + 要发送的数据逐位取反。
          > 如果要发送0x11， 则需要发送0x5c 0xEE (0xEE = ~0x11)
          > 如果要发送0x13， 则需要发送0x5c 0xEC (0xEC = ~0x13)
          > 如果要发送0x5c， 则需要发送0x5c 0xA3  (0xA3 = ~0x5C)
        注意一:
          转换后的数据包不影响原来数据包的组包方式，即size位和crc位和原始包相同

          原始数据包: ad 00 04 94 00 5c 01 c9    (包含5c)
                                     --
          转换数据包: ad 00 04 94 00 5c A3 01 c9 (转换后长度04和crc结果都不变)
                                     -----
        注意二:
          模块硬件会自动进行转义，不需要软件进行转义处理，发送和接收都是转义好的数据包。
          和模块通信对端需要对数据包进行转义处理
          modem TX --------->  ad 00 04 94 00 5c 01 c9   (modem硬件自动转义，无需软件处理)
          PC    RX <---------  ad 00 04 94 00 5c A3 01 c9(已经是通过modem的硬件转义后的数据包)
          PC    TX --------->  ad 00 04 94 00 5c A3 01 c9(pc侧软件转义好的数据包)
          modm  RX <---------  ad 00 04 94 00 5c 01 c9   (modem硬件自动转义，无需软件处理)
        注意三:
          数据包的每个特殊字符都需要转义。包括size、id、data、crc中特殊字符都需要转义
